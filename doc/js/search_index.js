var search_data = {"index":{"searchIndex":["standupmd","cli","testhelper","teststandupmd","append_previous?()","append_to_previous_entry_tasks()","bullet_character=()","cli()","create_standup_file()","current_entry_tasks=()","directory=()","echo()","edit()","edit?()","editor()","entry_previously_added?()","execute()","file_written?()","fixtures()","header_depth=()","impediments=()","json?()","load()","load()","new()","new()","notes=()","previous_entry_tasks=()","print_all_entries()","print_all_entries?()","print_current_entry()","print_current_entry?()","reload()","setup()","should_append?()","should_append?()","standup()","standup()","sub_header_depth=()","sub_header_order()","sub_header_order=()","teardown()","test_preference_file()","test_version()","test_all_previous_entries()","test_append_previous?()","test_bullet_character()","test_class_load()","test_current_entry()","test_current_entry_tasks()","test_current_header()","test_directory()","test_edit?()","test_editor()","test_entry_previously_added?()","test_file()","test_file_name_format()","test_file_written?()","test_header_date_format()","test_header_depth()","test_impediments()","test_impediments_header()","test_initialize()","test_json?()","test_load()","test_notes()","test_notes_header()","test_options()","test_preferences()","test_previous_entry_tasks()","test_previous_file_when_current_and_previous_month_do_not_exist()","test_previous_file_when_current_month_file_does_not_exist_but_previous_does()","test_previous_file_when_entry_exists_for_today()","test_previous_header()","test_print_all_entries?()","test_print_current_empty?()","test_reload()","test_self_execute()","test_setting_attributes_via_block()","test_standup()","test_sub_header_depth()","test_sub_header_order()","test_verbose?()","test_write()","test_write?()","verbose?()","write()","write?()","write_file()","gemfile","gemfile.lock","license","readme","rakefile","standup_md.gemspec"],"longSearchIndex":["standupmd","standupmd::cli","testhelper","teststandupmd","standupmd::cli#append_previous?()","standupmd::cli#append_to_previous_entry_tasks()","standupmd#bullet_character=()","testhelper#cli()","testhelper#create_standup_file()","standupmd#current_entry_tasks=()","standupmd#directory=()","standupmd::cli#echo()","standupmd::cli#edit()","standupmd::cli#edit?()","standupmd::cli#editor()","standupmd#entry_previously_added?()","standupmd::cli::execute()","standupmd#file_written?()","testhelper#fixtures()","standupmd#header_depth=()","standupmd#impediments=()","standupmd::cli#json?()","standupmd::load()","standupmd#load()","standupmd::new()","standupmd::cli::new()","standupmd#notes=()","standupmd#previous_entry_tasks=()","standupmd::cli#print_all_entries()","standupmd::cli#print_all_entries?()","standupmd::cli#print_current_entry()","standupmd::cli#print_current_entry?()","standupmd#reload()","teststandupmd#setup()","standupmd::cli#should_append?()","teststandupmd#should_append?()","standupmd::cli#standup()","testhelper#standup()","standupmd#sub_header_depth=()","standupmd#sub_header_order()","standupmd#sub_header_order=()","teststandupmd#teardown()","teststandupmd#test_preference_file()","teststandupmd#test_version()","teststandupmd#test_all_previous_entries()","teststandupmd#test_append_previous?()","teststandupmd#test_bullet_character()","teststandupmd#test_class_load()","teststandupmd#test_current_entry()","teststandupmd#test_current_entry_tasks()","teststandupmd#test_current_header()","teststandupmd#test_directory()","teststandupmd#test_edit?()","teststandupmd#test_editor()","teststandupmd#test_entry_previously_added?()","teststandupmd#test_file()","teststandupmd#test_file_name_format()","teststandupmd#test_file_written?()","teststandupmd#test_header_date_format()","teststandupmd#test_header_depth()","teststandupmd#test_impediments()","teststandupmd#test_impediments_header()","teststandupmd#test_initialize()","teststandupmd#test_json?()","teststandupmd#test_load()","teststandupmd#test_notes()","teststandupmd#test_notes_header()","teststandupmd#test_options()","teststandupmd#test_preferences()","teststandupmd#test_previous_entry_tasks()","teststandupmd#test_previous_file_when_current_and_previous_month_do_not_exist()","teststandupmd#test_previous_file_when_current_month_file_does_not_exist_but_previous_does()","teststandupmd#test_previous_file_when_entry_exists_for_today()","teststandupmd#test_previous_header()","teststandupmd#test_print_all_entries?()","teststandupmd#test_print_current_empty?()","teststandupmd#test_reload()","teststandupmd#test_self_execute()","teststandupmd#test_setting_attributes_via_block()","teststandupmd#test_standup()","teststandupmd#test_sub_header_depth()","teststandupmd#test_sub_header_order()","teststandupmd#test_verbose?()","teststandupmd#test_write()","teststandupmd#test_write?()","standupmd::cli#verbose?()","standupmd#write()","standupmd::cli#write?()","standupmd::cli#write_file()","","","","","",""],"info":[["StandupMD","","StandupMD.html","","<p>The class for handing reading/writing of entries.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">su</span> = <span class=\"ruby-constant\">StandupMD</span>.<span class=\"ruby-identifier\">new</span>\n</pre>\n"],["StandupMD::CLI","","StandupMD/CLI.html","","<p>Class for handing the command-line interface.\n"],["TestHelper","","TestHelper.html","","<p>Module to include in tests that provides helper functions.\n"],["TestStandupMD","","TestStandupMD.html","","<p>The test suite for <code>CLI</code>.\n<p>The test suite for <code>StandupMD</code>.\n"],["append_previous?","StandupMD::CLI","StandupMD/CLI.html#method-i-append_previous-3F","()","<p>Should `previous_entry_tasks` be appended? If false, <code>previous_entry_tasks</code> will be overwritten.\n<p>@return …\n"],["append_to_previous_entry_tasks","StandupMD::CLI","StandupMD/CLI.html#method-i-append_to_previous_entry_tasks","()","<p>Appends entries passed at runtime to existing previous entries.\n<p>@return [Hash]\n"],["bullet_character=","StandupMD","StandupMD.html#method-i-bullet_character-3D","(character)","<p>Setter for bullet_character. Must be * (asterisk) or - (dash).\n<p>@param [String] character\n<p>@return [String] …\n"],["cli","TestHelper","TestHelper.html#method-i-cli","(options = [])","<p>Creates instance of <code>CLI</code>.\n<p>@param [Array] options Parsed by <code>getopts</code>\n<p>@return [StandupMD::CLI]\n"],["create_standup_file","TestHelper","TestHelper.html#method-i-create_standup_file","(file, fixture = 'previous_entry')","<p>Creates the standup file with entries.\n<p>@param [String] file The name of the file to create\n<p>@param [String] …\n"],["current_entry_tasks=","StandupMD","StandupMD.html#method-i-current_entry_tasks-3D","(tasks)","<p>Setter for current entry tasks.\n<p>@param [Array] tasks\n<p>@return [Array]\n"],["directory=","StandupMD","StandupMD.html#method-i-directory-3D","(directory)","<p>Setter for directory. Must be expanded in case the user uses `~` for home. If the directory doesn&#39;t …\n"],["echo","StandupMD::CLI","StandupMD/CLI.html#method-i-echo","(msg)","<p>Prints output if <code>verbose</code> is true.\n<p>@return [nil]\n"],["edit","StandupMD::CLI","StandupMD/CLI.html#method-i-edit","()","<p>Opens the file in an editor. Abandons the script.\n"],["edit?","StandupMD::CLI","StandupMD/CLI.html#method-i-edit-3F","()","<p>Should the standup file be opened in the editor?\n<p>@return [Boolean] Default is true\n"],["editor","StandupMD::CLI","StandupMD/CLI.html#method-i-editor","()","<p>Tries to determine the editor, first by checking if the user has one set in their preferences. If not, …\n"],["entry_previously_added?","StandupMD","StandupMD.html#method-i-entry_previously_added-3F","()","<p>Was today&#39;s entry already in the file?\n<p>@return [boolean] true if today&#39;s entry was already in …\n"],["execute","StandupMD::CLI","StandupMD/CLI.html#method-c-execute","(options = [])","<p>Creates an instance of <code>StandupMD</code> and runs what the user requested.\n"],["file_written?","StandupMD","StandupMD.html#method-i-file_written-3F","()","<p>Has the file been written since instantiated?\n<p>@return [boolean]\n<p>@example\n"],["fixtures","TestHelper","TestHelper.html#method-i-fixtures","()","<p>Reads the fixtures in as a hash.\n<p>@return [Hash]\n"],["header_depth=","StandupMD","StandupMD.html#method-i-header_depth-3D","(depth)","<p>Number of octothorps (#) to use before the main header.\n<p>@param [Integer] depth\n<p>@return [Integer]\n"],["impediments=","StandupMD","StandupMD.html#method-i-impediments-3D","(tasks)","<p>Setter for impediments.\n<p>@param [Array] tasks\n<p>@return [Array]\n"],["json?","StandupMD::CLI","StandupMD/CLI.html#method-i-json-3F","()","<p>If printing an entry, should it be printed as json?\n<p>@return [Boolean] Default is false\n"],["load","StandupMD","StandupMD.html#method-c-load","(attributes = {})","<p>Convenience method for calling <code>new</code> + <code>load</code>\n<p>@param [Hash] attributes Attributes to set before loading.\n<p>@example …\n"],["load","StandupMD","StandupMD.html#method-i-load","()","<p>Sets internal instance variables. Called when first instantiated, or after directory is set.\n<p>@return [self] …\n"],["new","StandupMD","StandupMD.html#method-c-new","()","<p>Constructor. Yields the instance so you can pass a block to access setters.\n<p>@return [self]\n<p>@example\n"],["new","StandupMD::CLI","StandupMD/CLI.html#method-c-new","(options)","<p>Constructor. Sets defaults.\n<p>@param [Array] options\n"],["notes=","StandupMD","StandupMD.html#method-i-notes-3D","(tasks)","<p>Setter for notes.\n<p>@param [Array] notes\n<p>@return [Array]\n"],["previous_entry_tasks=","StandupMD","StandupMD.html#method-i-previous_entry_tasks-3D","(tasks)","<p>Setter for current entry tasks.\n<p>@param [Array] tasks\n<p>@return [Array]\n"],["print_all_entries","StandupMD::CLI","StandupMD/CLI.html#method-i-print_all_entries","()","<p>Prints all entries to the command line.\n<p>@return [nil]\n"],["print_all_entries?","StandupMD::CLI","StandupMD/CLI.html#method-i-print_all_entries-3F","()","<p>Should all entries be printed? If true, disables editing.\n<p>@return [Boolean] Default is false\n"],["print_current_entry","StandupMD::CLI","StandupMD/CLI.html#method-i-print_current_entry","()","<p>Prints the current entry to the command line.\n<p>@return [nil]\n"],["print_current_entry?","StandupMD::CLI","StandupMD/CLI.html#method-i-print_current_entry-3F","()","<p>Should current entry be printed? If true, disables editing.\n<p>@return [Boolean] Default is false\n"],["reload","StandupMD","StandupMD.html#method-i-reload","()","<p>Alias of <code>load</code>\n<p>@return [self]\n"],["setup","TestStandupMD","TestStandupMD.html#method-i-setup","()","<p>Set working directory, current month&#39;s file, and last month&#39;s file, which will be created and …\n"],["should_append?","StandupMD::CLI","StandupMD/CLI.html#method-i-should_append-3F","()","<p>Did the user pass <code>previous_entry_tasks</code>, and should we append?\n<p>@return [Boolean]\n"],["should_append?","TestStandupMD","TestStandupMD.html#method-i-should_append-3F","()","<p>True only if <code>--no-append</code> and <code>--previous-entry-tasks</code> are passed.\n"],["standup","StandupMD::CLI","StandupMD/CLI.html#method-i-standup","()","<p>Sets up an instance of <code>StandupMD</code> and passes all user preferences.\n<p>@return [StandupMD]\n"],["standup","TestHelper","TestHelper.html#method-i-standup","(directory, args = {})","<p>Creates <code>StandupUP</code> instance. Directory must be passed, usually a subdirectory of <code>test</code>, so we don&#39;t …\n"],["sub_header_depth=","StandupMD","StandupMD.html#method-i-sub_header_depth-3D","(depth)","<p>Number of octothorps (#) to use before sub headers (Current, Previous, etc).\n<p>@param [Integer] depth\n<p>@return …\n"],["sub_header_order","StandupMD","StandupMD.html#method-i-sub_header_order","()","<p>Return a copy of the sub-header order so the user can&#39;t modify the array.\n<p>@return [Array]\n"],["sub_header_order=","StandupMD","StandupMD.html#method-i-sub_header_order-3D","(array)","<p>Preferred order for sub-headers.\n<p>@param [Array] Values must be %w[previous current impediment notes]\n<p>@return …\n"],["teardown","TestStandupMD","TestStandupMD.html#method-i-teardown","()","<p>Destroy the working directory and its contents.\n"],["test_PREFERENCE_FILE","TestStandupMD","TestStandupMD.html#method-i-test_PREFERENCE_FILE","()","<p>The user&#39;s preference file is a string.\n"],["test_VERSION","TestStandupMD","TestStandupMD.html#method-i-test_VERSION","()","<p><code>StandupMD::VERSION</code> should consist of three integers separated by dots.\n"],["test_all_previous_entries","TestStandupMD","TestStandupMD.html#method-i-test_all_previous_entries","()",""],["test_append_previous?","TestStandupMD","TestStandupMD.html#method-i-test_append_previous-3F","()","<p>True by default. False if flag is passed.\n"],["test_bullet_character","TestStandupMD","TestStandupMD.html#method-i-test_bullet_character","()",""],["test_class_load","TestStandupMD","TestStandupMD.html#method-i-test_class_load","()","<p>Make sure load accepts a hash of attributes, sets them, and returns an instance of itself.\n"],["test_current_entry","TestStandupMD","TestStandupMD.html#method-i-test_current_entry","()","<p><code>current_entry</code> should be a hash. If <code>file</code> already has an entry for today, it will be read and used as  …\n"],["test_current_entry_tasks","TestStandupMD","TestStandupMD.html#method-i-test_current_entry_tasks","()",""],["test_current_header","TestStandupMD","TestStandupMD.html#method-i-test_current_header","()",""],["test_directory","TestStandupMD","TestStandupMD.html#method-i-test_directory","()",""],["test_edit?","TestStandupMD","TestStandupMD.html#method-i-test_edit-3F","()","<p>True by default. False if flag is passed.\n"],["test_editor","TestStandupMD","TestStandupMD.html#method-i-test_editor","()","<p>The editor should be set by preferences, or env, or set to &#39;vim&#39;.\n"],["test_entry_previously_added?","TestStandupMD","TestStandupMD.html#method-i-test_entry_previously_added-3F","()",""],["test_file","TestStandupMD","TestStandupMD.html#method-i-test_file","()","<p>The file name should equal file_name_format parsed by Date.strftime. The default is Date.today.strftime(&#39;%Y_%m.md&#39;) …\n"],["test_file_name_format","TestStandupMD","TestStandupMD.html#method-i-test_file_name_format","()",""],["test_file_written?","TestStandupMD","TestStandupMD.html#method-i-test_file_written-3F","()","<p>Booleans\n"],["test_header_date_format","TestStandupMD","TestStandupMD.html#method-i-test_header_date_format","()",""],["test_header_depth","TestStandupMD","TestStandupMD.html#method-i-test_header_depth","()",""],["test_impediments","TestStandupMD","TestStandupMD.html#method-i-test_impediments","()",""],["test_impediments_header","TestStandupMD","TestStandupMD.html#method-i-test_impediments_header","()",""],["test_initialize","TestStandupMD","TestStandupMD.html#method-i-test_initialize","()","<p>The <code>initialize</code> method should accept the same parameters as <code>exectute</code>.\n"],["test_json?","TestStandupMD","TestStandupMD.html#method-i-test_json-3F","()","<p>False by default. True if flag is passed.\n"],["test_load","TestStandupMD","TestStandupMD.html#method-i-test_load","()",""],["test_notes","TestStandupMD","TestStandupMD.html#method-i-test_notes","()",""],["test_notes_header","TestStandupMD","TestStandupMD.html#method-i-test_notes_header","()",""],["test_options","TestStandupMD","TestStandupMD.html#method-i-test_options","()","<p>The <code>options</code> should be an array of options passed from the command line.\n"],["test_preferences","TestStandupMD","TestStandupMD.html#method-i-test_preferences","()","<p>The <code>preferences</code> are the settings after <code>options</code> are parsed.\n"],["test_previous_entry_tasks","TestStandupMD","TestStandupMD.html#method-i-test_previous_entry_tasks","()",""],["test_previous_file_when_current_and_previous_month_do_not_exist","TestStandupMD","TestStandupMD.html#method-i-test_previous_file_when_current_and_previous_month_do_not_exist","()","<p>When neither last month&#39;s file, nor this month&#39;s file exist, previous_file should be an empty …\n"],["test_previous_file_when_current_month_file_does_not_exist_but_previous_does","TestStandupMD","TestStandupMD.html#method-i-test_previous_file_when_current_month_file_does_not_exist_but_previous_does","()","<p>When last month&#39;s file exists, but this month&#39;s doesn&#39;t or is empty, previous_file should …\n"],["test_previous_file_when_entry_exists_for_today","TestStandupMD","TestStandupMD.html#method-i-test_previous_file_when_entry_exists_for_today","()","<p>If there are previous entries for this month, previous file will be this month&#39;s file.\n"],["test_previous_header","TestStandupMD","TestStandupMD.html#method-i-test_previous_header","()",""],["test_print_all_entries?","TestStandupMD","TestStandupMD.html#method-i-test_print_all_entries-3F","()","<p>False by default. True if flag is passed.\n"],["test_print_current_empty?","TestStandupMD","TestStandupMD.html#method-i-test_print_current_empty-3F","()","<p>False by default. True if flag is passed.\n"],["test_reload","TestStandupMD","TestStandupMD.html#method-i-test_reload","()","<p>The reload method should exist, and is an alias of <code>load</code>.\n"],["test_self_execute","TestStandupMD","TestStandupMD.html#method-i-test_self_execute","()","<p>The <code>execute</code> method is the entry point for the CLI. It&#39;s parameter is an array of command-line flags …\n"],["test_setting_attributes_via_block","TestStandupMD","TestStandupMD.html#method-i-test_setting_attributes_via_block","()","<p>Attributes should be able to be set if you pass a block at instantiation.\n"],["test_standup","TestStandupMD","TestStandupMD.html#method-i-test_standup","()","<p>Creates the instance of <code>StandupMD</code>.\n"],["test_sub_header_depth","TestStandupMD","TestStandupMD.html#method-i-test_sub_header_depth","()",""],["test_sub_header_order","TestStandupMD","TestStandupMD.html#method-i-test_sub_header_order","()",""],["test_verbose?","TestStandupMD","TestStandupMD.html#method-i-test_verbose-3F","()","<p>False by default. True if flag is passed.\n"],["test_write","TestStandupMD","TestStandupMD.html#method-i-test_write","()",""],["test_write?","TestStandupMD","TestStandupMD.html#method-i-test_write-3F","()","<p>True by default. False if flag is passed.\n"],["verbose?","StandupMD::CLI","StandupMD/CLI.html#method-i-verbose-3F","()","<p>Should debug info be printed?\n<p>@return [Boolean] Default is false\n"],["write","StandupMD","StandupMD.html#method-i-write","()","<p>Writes a new entry to the file if the first entry in the file isn&#39;t today.\n<p>@return [Boolean]\n"],["write?","StandupMD::CLI","StandupMD/CLI.html#method-i-write-3F","()","<p>Should the file be written?\n<p>@return [Boolean] Default is true\n"],["write_file","StandupMD::CLI","StandupMD/CLI.html#method-i-write_file","()","<p>Writes entries to the file.\n<p>@return [Boolean] true if file was written\n"],["Gemfile","","Gemfile.html","","<p># frozen_string_literal: true\n<p>source “rubygems.org”\n<p>git_source(:github) { |repo| “github.com/#{repo}.git …\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>PATH\n\n<pre>remote: .\nspecs:\n  standup_md (0.0.9)</pre>\n<p>GEM\n"],["LICENSE","","LICENSE.html","","<p>MIT License\n<p>Copyright © 2020 Evan Gray\n<p>Permission is hereby granted, free of charge, to any person obtaining …\n"],["README","","README_md.html","","<p>The Standup Doctor\n\n<blockquote><p>The cure for all your standup woes.\n</blockquote>\n<p>A highly customizable and automated way to keep …\n"],["Rakefile","","Rakefile.html","","<p>require_relative &#39;lib/standup_md&#39;\n<p>task :default =&gt; :test\n<p>desc “Build the gem” task …\n"],["standup_md.gemspec","","standup_md_gemspec.html","","<p>require_relative &#39;lib/standup_md/version&#39;\n<p>Gem::Specification.new do |spec|\n\n<pre>spec.name          = ...</pre>\n"]]}}